generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "./../interfaces/generated/prisma-models.ts"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "./../graphql/generated/pothos-types.ts"
}

generator pothosCrud {
  provider            = "prisma-generator-pothos-codegen"
  generatorConfigPath = "../../pothos.config.js"
  prismaPlugin        = "@pothos/plugin-prisma"
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String?              @unique
  name               String?
  image              String?
  password           String? // <- uložený hash hesla
  roles              UserRole[]
  accounts           Account[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PasswordResetToken PasswordResetToken[]
  VerificationToken  VerificationToken[]
}

model Account {
  id                Int       @id @default(autoincrement())
  provider          String // "google" | "github" | "facebook" | "apple"
  providerAccountId String // ID od poskytovatele
  accessToken       String? // volitelné, pokud ukládáš tokeny
  refreshToken      String?
  expiresAt         DateTime?
  userId            Int
  user              User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  tokenHash String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  tokenHash String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
